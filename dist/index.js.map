{"version":3,"sources":["webpack://janusgraphmanager/webpack/universalModuleDefinition","webpack://janusgraphmanager/./src/JanusGraphManager.ts","webpack://janusgraphmanager/./src/builders/EdgeBuilder.ts","webpack://janusgraphmanager/./src/builders/EnableIndexBuilder.ts","webpack://janusgraphmanager/./src/builders/GraphIndexBuilder.ts","webpack://janusgraphmanager/./src/builders/PropertyBuilder.ts","webpack://janusgraphmanager/./src/builders/VertexBuilder.ts","webpack://janusgraphmanager/./src/builders/VertexCentricIndexBuilder.ts","webpack://janusgraphmanager/./src/builders/index.ts","webpack://janusgraphmanager/webpack/bootstrap","webpack://janusgraphmanager/webpack/startup"],"names":[],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"janusgraphmanager\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"janusgraphmanager\"] = factory();\n\telse\n\t\troot[\"janusgraphmanager\"] = factory();\n})(self, function() {\nreturn ","import { driver } from \"gremlin\";\nimport { GraphSchema } from \"./types/GraphSchema\";\nimport {\n    EdgeBuilder,\n    EnableIndexBuilder,\n    GraphIndexBuilder,\n    PropertyBuilder,\n    VertexBuilder,\n    VertexCentricIndexBuilder,\n} from \"./builders\";\n\ntype ManagerState = \"NEW\" | \"INITIALIZED\" | \"ERROR\" | \"CLOSED\";\n\nexport class JanusGraphManager {\n\n    private state: ManagerState = \"NEW\";\n\n    private OPEN_MGMT = `mgmt = ${this.graphName}.openManagement();0;`;\n\n    /**\n     * \n     * @param client Preconfigured gremlin client to use. Using a client with a defined session name is recommended.\n     * @param graphName Name of the graph to traverse. Default `graph`.\n     * @param useConfiguredGraphFactory Whether or not to use the ConfiguredGraphFactory for dynamic graphs. Default `false`.\n     */\n    constructor(private client: driver.Client, private graphName: string = 'graph', private useConfiguredGraphFactory: boolean = false) {\n    }\n\n    /**\n     * Opens the management system for the client session.\n     * @returns A promise with the state of the manager.\n     */\n    async init(): Promise<ManagerState> {\n        try {\n            if (this.useConfiguredGraphFactory) {\n                await this.client.submit(`${this.graphName} = ConfiguredGraphFactory.open('${this.graphName})`);\n            }\n            await this.client.submit(this.OPEN_MGMT);\n            this.state = \"INITIALIZED\";\n            return Promise.resolve(this.state);\n        } catch (err) {\n            this.state = \"ERROR\";\n            return Promise.reject(\"ERROR\");\n        }\n    }\n\n    /**\n     * Will build only the indices from a graph schema.\n     * @param schema - GraphSchema to get index definitions from.\n     * @param commit - Whether or not to commit and close the traversal. Default: `false`\n     * @returns A promise containing the number of successful traversals made.\n     */\n    async createIndices(schema: GraphSchema, commit = false): Promise<number> {\n        try {\n            let count = 0;\n            // Generate graph indices.\n            count += (\n                await Promise.all(\n                    schema.graphIndices\n                        .map((i) => {\n                            const builder = new GraphIndexBuilder(i.name);\n                            builder\n                                .label(i.label)\n                                .type(i.type)\n                                .unique(i.unique);\n                            i.keys.forEach((k) => builder.key(k));\n                            return builder.build();\n                        })\n                        .map((msg) => this.client.submit(msg))\n                )\n            ).length;\n            // Generate vc indices.\n            count += (\n                await Promise.all(\n                    schema.vcIndices\n                        .map((i) => {\n                            const builder = new VertexCentricIndexBuilder(\n                                i.name\n                            );\n                            builder\n                                .direction(i.direction)\n                                .edgelabel(i.edgelabel)\n                                .order(i.order);\n                            i.keys.forEach((k) => builder.key(k));\n                            return builder.build();\n                        })\n                        .map((msg) => this.client.submit(msg))\n                )\n            ).length;\n            if (commit) {\n                await this.commit();\n            }\n            return Promise.resolve(count);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    /**\n     * Attempts to enable indices.\n     * @param schema - GraphSchema to enable indicies for. \n     * @param commit - Whether or not to commit and close the traversal. Default: `false`\n     * @returns A promise containing the number of successful traversals made.\n     */\n    async enableIndices(schema: GraphSchema, commit = false): Promise<number> {\n        try {\n            const gi = schema.graphIndices\n            .map((i) => {\n                const builder = new EnableIndexBuilder(i.name, schema.name);\n                return builder.build();\n            });\n            const vci = schema.vcIndices\n                .map((i) => {\n                    const builder = new EnableIndexBuilder(i.name, schema.name);\n                    return builder.type(\"VertexCentric\")\n                        .label(i.edgelabel)\n                        .build();\n                });\n            const count = [...gi, ...vci].map((msg) => this.client.submit(msg)).length;\n            if (commit) {\n                await this.commit();\n            }\n            return Promise.resolve(count);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    /**\n     * Creates all the schema definitions.\n     * @param schema - GraphSchema to get schema definitions from.\n     * @param indices - If set `true`, will build indices as well. Default `false`.\n     * @returns A promise containing the number of successful traversals made.\n     */\n    async createSchema(schema: GraphSchema, indices = false): Promise<number> {\n        try {\n            let count = 0;\n            // Extract/Build our properties definitions.\n            count += (\n                await Promise.all(\n                    [...schema.vertices, ...schema.edges]\n                        .flatMap((v) => v.properties)\n                        .map((p) => {\n                            const builder = new PropertyBuilder(p.key);\n                            return builder\n                                .datatype(p.datatype)\n                                .cardinality(p.cardinality)\n                                .build();\n                        })\n                        .map((msg) => this.client.submit(msg))\n                )\n            ).length;\n            // Create labels and associate properties for vertices.\n            count += (\n                await Promise.all(\n                    schema.vertices\n                        .map((v) => {\n                            const builder = new VertexBuilder(v.label);\n                            v.properties.forEach((p) => builder.property(p));\n                            return builder.build();\n                        })\n                        .map((msg) => this.client.submit(msg))\n                )\n            ).length;\n            // Create labels and associate properties for edges.\n            count += (\n                await Promise.all(\n                    schema.edges\n                        .map((e) => {\n                            const builder = new EdgeBuilder(e.label);\n                            e.properties.forEach((p) => builder.property(p));\n                            return builder.build();\n                        })\n                        .map((msg) => this.client.submit(msg))\n                )\n            ).length;\n            if (indices) {\n                count += await this.createIndices(schema);\n            }\n            await this.commit();\n            return Promise.resolve(count);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    /**\n     * Leverages the gremlin client to commit a management message.\n     * @param message Message to send prior to the commit. Not required.\n     * @returns \n     */\n    async commit(message?: string): Promise<unknown> {\n        try {\n            const close = await this.client.submit(`${message ?? \"\"};mgmt.commit();`);\n            this.state = \"CLOSED\";\n            return close;\n        } catch (err) {\n            this.state = \"ERROR\";\n            return Promise.reject(err);\n        }\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { EdgeMultiplicity } from \"../types/Edge\";\nimport { Property } from \"../types/Property\";\n\nexport class EdgeBuilder implements Builder<string> {\n    private _multiplicity: EdgeMultiplicity = \"MULTI\";\n    private _properties: Set<Property> = new Set();\n\n    constructor(private _label: string) {}\n\n    multiplicity(multiplicity: EdgeMultiplicity): this {\n        this._multiplicity = multiplicity;\n        return this;\n    }\n\n    property(property: Property): this {\n        this._properties.add(property);\n        return this;\n    }\n\n    build(): string {\n        let output = `if (!mgmt.containsEdgeLabel('${this._label}')) `;\n        output += `mgmt.makeEdgeLabel('${this._label}')`;\n        output +=\n            this._multiplicity != null\n                ? `.multiplicity(${this._multiplicity})`\n                : \"\";\n        output += \"make();\";\n        if (this._properties.size > 0) {\n            output += \"mgmt.addProperties(\";\n            output += `mgmt.getEdgeLabel(${this._label}),`;\n            output += [...this._properties]\n                .map((prop) => `mgmt.getPropertyKey('${prop.key})`)\n                .join(\",\");\n            output += \")\";\n        }\n        return output;\n    }\n}\n","import { IndexType } from '../types/GraphIndex';\nimport { Builder } from './Builder.interface';\n\n/**\n * Builds a management string that attempts to enable a specific index.\n */\nexport class EnableIndexBuilder implements Builder<string> {\n\n    private _type!: IndexType;\n    private _label!: string;\n\n    /**\n     * Default constructor.\n     * @param _name Index to attempt to enable.\n     * @param _graph Graph name that the index resides on. Default `graph`.\n     */\n    constructor(private _name: string, private _graph: string = 'graph') {\n    }\n\n    type(type: IndexType): this {\n        this._type = type;\n        return this;\n    }\n\n    /**\n     * Sets the vertex label for VertexCentric indicies.\n     * @param label Label\n     * @returns The builder.\n     */\n    label(label: string): this {\n        if (this._type !== 'VertexCentric') {\n            console.warn(`Label ${label} set on EnableIndex builder. This only applies for VertexCentric indices.`);\n        }\n        this._label = label;\n        return this;\n    }\n\n    build(): string {\n        let output = 'mgmt.updateIndex(';\n        if (this._type === \"VertexCentric\") {\n            output += `mgmt.getRelationIndex(${this._graph}, '${this._name}', '${this._label}')`;\n        } else {\n            output += `mgmt.getGraphIndex(${this._graph}, '${this._name}')`;\n        }\n        output += `, SchemaAction.ENABLE_INDEX);`;\n        return output;\n    }\n\n}","import { Builder } from \"./Builder.interface\";\nimport { IndexKey, IndexType } from \"../types/GraphIndex\";\n\n/**\n * Index Builder for Composite or Mixed indices.\n * \n * For VertexCentric indicies, please use {@link VertexCentricIndexBuilder}\n */\nexport class GraphIndexBuilder implements Builder<string> {\n    private _type?: IndexType;\n    private _keys: Set<IndexKey> = new Set();\n    private _unique?: boolean;\n    private _label?: string;\n\n    constructor(private _name: string) {}\n\n    type(type: IndexType): this {\n        this._type = type;\n        return this;\n    }\n\n    key(key: IndexKey): this {\n        this._keys.add(key);\n        return this;\n    }\n\n    unique(unique = false): this {\n        this._unique = unique;\n        return this;\n    }\n    \n    label(label?: string): this {\n        this._label = label;\n        return this;\n    }\n\n    build(): string {\n        let output = `if (!mgmt.containsGraphIndex('${this._name}')) `;\n        output += `mgmt.buildIndex('${this._name}', Vertex.class)`;\n        output += [...this._keys]\n            .map(\n                (key) =>\n                    `.addKey(mgmt.getPropertyKey('${key.field}, Mapping.${key.mapping}.getParameter()'))`\n            )\n            .join(\"\");\n        output += this._unique ? `.unique()` : \"\";\n        output += this._label != null ? `.indexOnly(mgmt.getVertexLabel('${this._label}))` : \"\";\n        return output.concat(\n            this._type === \"Composite\"\n                ? \".buildCompositeIndex();\"\n                : '.buildMixedIndex(\"search\");'\n        );\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { PropertyCardinality, PropertyType } from \"../types/Property\";\n\nexport class PropertyBuilder implements Builder<string> {\n    private _datatype!: PropertyType;\n    private _cardinality: PropertyCardinality = \"SINGLE\";\n\n    constructor(private _key: string) {}\n\n    cardinality(cardinality: PropertyCardinality): this {\n        this._cardinality = cardinality;\n        return this;\n    }\n\n    datatype(datatype: PropertyType): this {\n        this._datatype = datatype;\n        return this;\n    }\n\n    build(): string {\n        let output = \"if (!mgmt.containsPropertyKey('${this._key}')) \";\n        output += `mgmt.makePropertyKey('${this._key}')`;\n        output +=\n            this._datatype != null ? `.dataType(${this._datatype}.class)` : \"\";\n        output +=\n            this._cardinality != null\n                ? `.cardinality(Cardinality.${this._cardinality})`\n                : \"\";\n        return output.concat(\".make();\");\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { Property } from \"../types/Property\";\n\nexport class VertexBuilder implements Builder<string> {\n    private _properties: Set<Property> = new Set();\n\n    constructor(private _label: string) {}\n\n    property(property: Property): this {\n        this._properties.add(property);\n        return this;\n    }\n\n    build(): string {\n        let output = `if (!mgmt.containsVertexLabel('${this._label}')) `;\n        output += `mgmt.makeVertexLabel('${this._label}')`;\n        output += \".make();\";\n        if (this._properties.size > 0) {\n            output += \"mgmt.addProperties(\";\n            output += `mgmt.getVertexLabel(${this._label}),`;\n            output += [...this._properties]\n                .map((prop) => `mgmt.getPropertyKey('${prop.key})`)\n                .join(\",\");\n            output += \")\";\n        }\n        return output;\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { Direction, Order } from \"../types/VertexCentricIndex\";\n\n/**\n * Index Builder for Vertex Centric indices.\n * \n * For Mixed/Composite, please use {@link IndexBuilder}\n */\nexport class VertexCentricIndexBuilder implements Builder<string> {\n    private _keys: Set<string> = new Set();\n    private _direction!: Direction;\n    private _order!: Order;\n    private _edgelabel!: string;\n\n    constructor(private _name: string) {}\n\n    edgelabel(edgelabel: string): this {\n        this._edgelabel = edgelabel;\n        return this;\n    }\n\n    direction(direction: Direction): this {\n        this._direction = direction;\n        return this;\n    }\n\n    order(order: Order): this {\n        this._order = order;\n        return this;\n    }\n\n    key(key: string): this {\n        this._keys.add(key);\n        return this;\n    }\n\n    build(): string {\n        // @TODO: Check for nulls in required properties.\n        let output = `if (!mgmt.containsGraphIndex('${this._name}')) `;\n        output += `mgmt.buildEdgeIndex(`;\n        output += `mgmt.getEdgeLabel(\"${this._edgelabel}\"),`;\n        output += `'${this._name}',`;\n        output += `Direction.${this._direction},`;\n        output += `Order.${this._order},`;\n        output += [...this._keys]\n            .map((key) => `mgmt.getPropertyKey('${key}')`)\n            .join(\",\");\n        return output.concat(\")\");\n    }\n}\n","export * from \"./EdgeBuilder\";\nexport * from \"./EnableIndexBuilder\";\nexport * from \"./GraphIndexBuilder\";\nexport * from \"./PropertyBuilder\";\nexport * from \"./VertexBuilder\";\nexport * from \"./VertexCentricIndexBuilder\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/JanusGraphManager.ts\");\n"],"sourceRoot":""}