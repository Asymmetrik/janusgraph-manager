{"version":3,"sources":["webpack://janusgraphmanager/webpack/universalModuleDefinition","webpack://janusgraphmanager/./src/JanusGraphManager.ts","webpack://janusgraphmanager/./src/builders/EdgeBuilder.ts","webpack://janusgraphmanager/./src/builders/EnableIndexBuilder.ts","webpack://janusgraphmanager/./src/builders/GraphIndexBuilder.ts","webpack://janusgraphmanager/./src/builders/PropertyBuilder.ts","webpack://janusgraphmanager/./src/builders/VertexBuilder.ts","webpack://janusgraphmanager/./src/builders/VertexCentricIndexBuilder.ts","webpack://janusgraphmanager/./src/builders/index.ts","webpack://janusgraphmanager/webpack/bootstrap","webpack://janusgraphmanager/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","options","state","OPEN_MGMT","this","graphName","useConfiguredGraphFactory","init","client","submit","configPath","Promise","resolve","reject","createIndices","schema","commit","count","all","graphIndices","map","i","builder","GraphIndexBuilder","name","label","type","unique","keys","forEach","k","key","build","msg","length","vcIndices","VertexCentricIndexBuilder","direction","edgelabel","order","enableIndices","gi","EnableIndexBuilder","vci","createSchema","indices","vertices","edges","flatMap","v","properties","p","PropertyBuilder","datatype","cardinality","VertexBuilder","property","e","EdgeBuilder","message","close","JanusGraphManager","_label","_multiplicity","_properties","multiplicity","some","push","output","prop","join","_name","_graph","_type","console","warn","Error","_keys","field","_unique","mapping","concat","_key","_cardinality","_datatype","Set","_order","_edgelabel","_direction","add","size","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"janusgraphmanager\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"janusgraphmanager\"] = factory();\n\telse\n\t\troot[\"janusgraphmanager\"] = factory();\n})(self, function() {\nreturn ","import { driver } from \"gremlin\";\nimport { GraphSchema } from \"./types/GraphSchema\";\nimport {\n    EdgeBuilder,\n    EnableIndexBuilder,\n    GraphIndexBuilder,\n    PropertyBuilder,\n    VertexBuilder,\n    VertexCentricIndexBuilder,\n} from \"./builders\";\n\ntype ManagerState = \"NEW\" | \"READY\" | \"ERROR\" | \"CLOSED\";\n\nexport type JanusGraphMangerOptions = {\n    /**\n     * Preconfigured gremlin client to use. Using a client with a defined session name is recommended.\n     */\n    client: driver.Client,\n    /**\n     * Name of the graph to traverse.\n     */\n    graphName?: string,\n    /**\n     * Whether or not to use the ConfiguredGraphFactory for dynamic graphs.\n     */\n    useConfiguredGraphFactory?: boolean,\n    /**\n     * Path to a JanusGraphFactory configuration on the remote, for use with JanusGraphFactory.\n     */\n    configPath?: string\n};\n\nexport class JanusGraphManager {\n\n    private state: ManagerState = \"NEW\";\n\n    private OPEN_MGMT = `mgmt = ${this.options.graphName}.openManagement();0;`;\n\n    /**\n     * Default constructor.  \n     * In the options object, client is the only *required* option\n     * - graphName will have a default of `'graph'`.\n     * - useConfiguredGraphFactory will have a default of `false`\n     * - configPath has no default.\n     * \n     * @param options A set of options used to manage a JG graph.\n     */\n    constructor(\n        private options: JanusGraphMangerOptions\n    ) {\n        if (options.graphName == null) {\n            this.options.graphName = 'graph';\n        }\n        if (options.useConfiguredGraphFactory == null) {\n            this.options.useConfiguredGraphFactory = false;\n        }\n\n    }\n\n    /**\n     * Opens the management system for the client session.\n     * @returns A promise with the state of the manager.\n     */\n    async init(): Promise<ManagerState> {\n        try {\n            if (this.options.useConfiguredGraphFactory) {\n                await this.options.client.submit(`${this.options.graphName} = ConfiguredGraphFactory.open('${this.options.graphName}')`);\n            } else if (this.options.configPath != null) {\n                await this.options.client.submit(`${this.options.graphName} = JanusGraphFactory.open('${this.options.configPath})'`)\n            }\n            await this.options.client.submit(this.OPEN_MGMT);\n            this.state = \"READY\";\n            return Promise.resolve(this.state);\n        } catch (err) {\n            this.state = \"ERROR\";\n            return Promise.reject(\"ERROR\");\n        }\n    }\n\n    /**\n     * Will build only the indices from a graph schema.\n     * @param schema - GraphSchema to get index definitions from.\n     * @param commit - Whether or not to commit and close the traversal. Default: `false`\n     * @returns A promise containing the number of successful traversals made.\n     */\n    async createIndices(schema: GraphSchema, commit = false): Promise<number> {\n        try {\n            let count = 0;\n            // Generate graph indices.\n            count += (\n                await Promise.all(\n                    schema.graphIndices\n                        .map((i) => {\n                            const builder = new GraphIndexBuilder(i.name);\n                            builder\n                                .label(i.label)\n                                .type(i.type)\n                                .unique(i.unique);\n                            i.keys.forEach((k) => builder.key(k));\n                            return builder.build();\n                        })\n                        .map((msg) => this.options.client.submit(msg))\n                )\n            ).length;\n            // Generate vc indices.\n            count += (\n                await Promise.all(\n                    schema.vcIndices\n                        .map((i) => {\n                            const builder = new VertexCentricIndexBuilder(\n                                i.name\n                            );\n                            builder\n                                .direction(i.direction)\n                                .edgelabel(i.edgelabel)\n                                .order(i.order);\n                            i.keys.forEach((k) => builder.key(k));\n                            return builder.build();\n                        })\n                        .map((msg) => this.options.client.submit(msg))\n                )\n            ).length;\n            if (commit) {\n                await this.commit();\n            }\n            return Promise.resolve(count);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    /**\n     * Attempts to enable indices.\n     * @param schema - GraphSchema to enable indicies for. \n     * @param commit - Whether or not to commit and close the traversal. Default: `false`\n     * @returns A promise containing the number of successful traversals made.\n     */\n    async enableIndices(schema: GraphSchema, commit = false): Promise<number> {\n        try {\n            const gi = schema.graphIndices\n            .map((i) => {\n                const builder = new EnableIndexBuilder(i.name, schema.name);\n                return builder.build();\n            });\n            const vci = schema.vcIndices\n                .map((i) => {\n                    const builder = new EnableIndexBuilder(i.name, schema.name);\n                    return builder.type(\"VertexCentric\")\n                        .label(i.edgelabel)\n                        .build();\n                });\n            const count = [...gi, ...vci].map((msg) => this.options.client.submit(msg)).length;\n            if (commit) {\n                await this.commit();\n            }\n            return Promise.resolve(count);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    /**\n     * Creates all the schema definitions.\n     * @param schema - GraphSchema to get schema definitions from.\n     * @param indices - If set `true`, will build indices as well. Default `false`.\n     * @returns A promise containing the number of successful traversals made.\n     */\n    async createSchema(schema: GraphSchema, indices = false): Promise<number> {\n        try {\n            let count = 0;\n            // Extract/Build our properties definitions.\n            count += (\n                await Promise.all(\n                    [...schema.vertices, ...schema.edges]\n                        .flatMap((v) => v.properties)\n                        .map((p) => {\n                            const builder = new PropertyBuilder(p.key);\n                            return builder\n                                .datatype(p.datatype)\n                                .cardinality(p.cardinality)\n                                .build();\n                        })\n                        .map((msg) => this.options.client.submit(msg))\n                )\n            ).length;\n            // Create labels and associate properties for vertices.\n            count += (\n                await Promise.all(\n                    schema.vertices\n                        .map((v) => {\n                            const builder = new VertexBuilder(v.label);\n                            v.properties.forEach((p) => builder.property(p));\n                            return builder.build();\n                        })\n                        .map((msg) => this.options.client.submit(msg))\n                )\n            ).length;\n            // Create labels and associate properties for edges.\n            count += (\n                await Promise.all(\n                    schema.edges\n                        .map((e) => {\n                            const builder = new EdgeBuilder(e.label);\n                            e.properties.forEach((p) => builder.property(p));\n                            return builder.build();\n                        })\n                        .map((msg) => this.options.client.submit(msg))\n                )\n            ).length;\n            if (indices) {\n                count += await this.createIndices(schema);\n            }\n            await this.commit();\n            return Promise.resolve(count);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    /**\n     * Leverages the gremlin client to commit a management message.\n     * @param message Message to send prior to the commit. Not required.\n     * @returns A promise from client commit submission.\n     */\n    async commit(message?: string): Promise<unknown> {\n        try {\n            const commit = await this.options.client.submit(`${message ?? \"\"};mgmt.commit();`);\n            return commit;\n        } catch (err) {\n            this.state = \"ERROR\";\n            return Promise.reject(err);\n        }\n    }\n\n    /**\n     * Attempts to close the gremlin client.\n     * @returns A promise with close status-- defers to {@see driver.Client.prototype.close()}\n     */\n    async close(): Promise<void> {\n        try {\n            const close = await this.options.client.close();\n            this.state = \"CLOSED\";\n            return close;\n        } catch (err) {\n            this.state = \"ERROR\";\n            return Promise.reject(err);\n        }\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { EdgeMultiplicity } from \"../types/Edge\";\nimport { Property } from \"../types/Property\";\n\nexport class EdgeBuilder implements Builder<string> {\n    private _multiplicity: EdgeMultiplicity = \"MULTI\";\n    private _properties: Property[] = [];\n\n    constructor(private _label: string) {}\n\n    multiplicity(multiplicity: EdgeMultiplicity): this {\n        this._multiplicity = multiplicity;\n        return this;\n    }\n\n    property(property: Property): this {\n        if (this._properties.some((p) => p.key === property.key)) return this;\n        this._properties.push(property);\n        return this;\n    }\n\n    build(): string {\n        let output = `if (!mgmt.containsEdgeLabel('${this._label}')) `;\n        output += `mgmt.makeEdgeLabel('${this._label}')`;\n        output +=\n            this._multiplicity != null\n                ? `.multiplicity(${this._multiplicity})`\n                : \"\";\n        output += \".make();\";\n        if (this._properties.length > 0) {\n            output += \"mgmt.addProperties(\";\n            output += `mgmt.getEdgeLabel('${this._label}'), `;\n            output += [...this._properties]\n                .map((prop) => `mgmt.getPropertyKey('${prop.key}')`)\n                .join(\", \");\n            output += \")\";\n        }\n        return output;\n    }\n}\n","import { IndexType } from '../types/GraphIndex';\nimport { Builder } from './Builder.interface';\n\n/**\n * Builds a management string that attempts to enable a specific index.\n */\nexport class EnableIndexBuilder implements Builder<string> {\n    private _type!: IndexType;\n    private _label!: string;\n\n    /**\n     * Default constructor.\n     * @param _name Index to attempt to enable.\n     * @param _graph Graph name that the index resides on. Default `graph`.\n     */\n    constructor(private _name: string, private _graph: string = 'graph') {}\n\n    type(type: IndexType): this {\n        this._type = type;\n        return this;\n    }\n\n    /**\n     * Sets the vertex label for VertexCentric indicies.\n     * @param label Label\n     * @returns The builder.\n     */\n    label(label: string): this {\n        if (this._type !== 'VertexCentric') {\n            console.warn(\n                `Label ${label} set on EnableIndex builder. This only applies for VertexCentric indices.`\n            );\n        }\n        this._label = label;\n        return this;\n    }\n\n    /**\n     * Builds the output string.\n     * @returns String that calls ENABLE_INDEX in JG.\n     * @throws An Error if an attempt is made to enable a VertexCentric index without a label.\n     */\n    build(): string {\n        let output = 'mgmt.updateIndex(';\n        if (this._type === 'VertexCentric') {\n            if (this._label == null || this._label === '')\n                throw Error(\n                    `Vertex Centric index '${this._name}' attempted to be enabled without a label definition.`\n                );\n            output += `mgmt.getRelationIndex(${this._graph}, '${this._name}', '${this._label}')`;\n        } else {\n            output += `mgmt.getGraphIndex(${this._graph}, '${this._name}')`;\n        }\n        output += `, SchemaAction.ENABLE_INDEX);`;\n        return output;\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { CompositeOrMixedIndexType, IndexKey } from \"../types/GraphIndex\";\n\n/**\n * Index Builder for Composite or Mixed indices.\n * \n * For VertexCentric indicies, please use {@link VertexCentricIndexBuilder}\n */\nexport class GraphIndexBuilder implements Builder<string> {\n    private _type?: CompositeOrMixedIndexType;\n    private _keys: IndexKey[] = [];\n    private _unique?: boolean;\n    private _label?: string;\n\n    constructor(private _name: string) {}\n\n    type(type: CompositeOrMixedIndexType): this {\n        this._type = type;\n        return this;\n    }\n\n    key(key: IndexKey): this {\n        if (this._keys.some((k) => k.field === key.field)) return this;\n        this._keys.push(key);\n        return this;\n    }\n\n    unique(unique = false): this {\n        this._unique = unique;\n        return this;\n    }\n    \n    label(label?: string): this {\n        this._label = label;\n        return this;\n    }\n\n    build(): string {\n        if (this._keys.length === 0) {\n            throw Error(`Unable to generate index ${this._name} with no key definitions.`);\n        }\n        let output = `if (!mgmt.containsGraphIndex('${this._name}')) `;\n        output += `mgmt.buildIndex('${this._name}', Vertex.class)`;\n        output += [...this._keys]\n            .map(\n                (key) =>\n                    `.addKey(mgmt.getPropertyKey('${key.field}'), Mapping.${key.mapping}.getParameter())`\n            )\n            .join(\"\");\n        output += this._unique ? `.unique()` : \"\";\n        output += this._label != null ? `.indexOnly(mgmt.getVertexLabel('${this._label}'))` : \"\";\n        return output.concat(\n            this._type === \"Mixed\"\n                ? '.buildMixedIndex(\"search\");'\n                : \".buildCompositeIndex();\"\n        );\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { PropertyCardinality, PropertyType } from \"../types/Property\";\n\nexport class PropertyBuilder implements Builder<string> {\n    private _datatype!: PropertyType;\n    private _cardinality: PropertyCardinality = \"SINGLE\";\n\n    constructor(private _key: string) {}\n\n    cardinality(cardinality: PropertyCardinality): this {\n        this._cardinality = cardinality;\n        return this;\n    }\n\n    datatype(datatype: PropertyType): this {\n        this._datatype = datatype;\n        return this;\n    }\n\n    build(): string {\n        let output = `if (!mgmt.containsPropertyKey('${this._key}')) `;\n        output += `mgmt.makePropertyKey('${this._key}')`;\n        output +=\n            this._datatype != null ? `.dataType(${this._datatype}.class)` : \"\";\n        output +=\n            this._cardinality != null\n                ? `.cardinality(Cardinality.${this._cardinality})`\n                : \"\";\n        return output.concat(\".make();\");\n    }\n}\n","import { Builder } from './Builder.interface';\nimport { Property } from '../types/Property';\n\nexport class VertexBuilder implements Builder<string> {\n    private _properties: Property[] = [];\n\n    constructor(private _label: string) {}\n\n    property(property: Property): this {\n        if (this._properties.some((p) => p.key === property.key)) return this;\n        this._properties.push(property);\n        return this;\n    }\n\n    build(): string {\n        let output = `if (!mgmt.containsVertexLabel('${this._label}')) `;\n        output += `mgmt.makeVertexLabel('${this._label}')`;\n        output += '.make();';\n        if (this._properties.length > 0) {\n            output += 'mgmt.addProperties(';\n            output += `mgmt.getVertexLabel('${this._label}'), `;\n            output += [...this._properties]\n                .map((prop) => `mgmt.getPropertyKey('${prop.key}')`)\n                .join(', ');\n            output += ')';\n        }\n        return output;\n    }\n}\n","import { Builder } from \"./Builder.interface\";\nimport { Direction, Order } from \"../types/VertexCentricIndex\";\n\n/**\n * Index Builder for Vertex Centric indices.\n * \n * For Mixed/Composite, please use {@link IndexBuilder}\n */\nexport class VertexCentricIndexBuilder implements Builder<string> {\n    private _keys: Set<string> = new Set();\n    private _direction!: Direction;\n    private _order: Order = \"asc\";\n    private _edgelabel!: string;\n\n    constructor(private _name: string) {}\n\n    edgelabel(edgelabel: string): this {\n        this._edgelabel = edgelabel;\n        return this;\n    }\n\n    direction(direction: Direction): this {\n        this._direction = direction;\n        return this;\n    }\n\n    order(order: Order): this {\n        this._order = order;\n        return this;\n    }\n\n    key(key: string): this {\n        this._keys.add(key);\n        return this;\n    }\n\n    build(): string {\n        if (this._keys.size === 0) {\n            throw Error(`Unable to generate vc index ${this._name} with no key definitions.`);\n        }\n        if (this._direction == null) {\n            throw Error(`Unable to generate vc index ${this._name} with no directionality.`);\n        }\n        if (this._edgelabel == null || this._edgelabel === '') {\n            throw Error(`Unable to generate vc index ${this._name} with no edge label.`);\n        }\n        let output = `if (!mgmt.containsGraphIndex('${this._name}')) `;\n        output += `mgmt.buildEdgeIndex(`;\n        output += `mgmt.getEdgeLabel('${this._edgelabel}'), `;\n        output += `'${this._name}', `;\n        output += `Direction.${this._direction}, `;\n        output += `Order.${this._order}, `;\n        output += [...this._keys]\n            .map((key) => `mgmt.getPropertyKey('${key}')`)\n            .join(\", \");\n        return output.concat(\");\");\n    }\n}\n","export * from \"./EdgeBuilder\";\nexport * from \"./EnableIndexBuilder\";\nexport * from \"./GraphIndexBuilder\";\nexport * from \"./PropertyBuilder\";\nexport * from \"./VertexBuilder\";\nexport * from \"./VertexCentricIndexBuilder\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(352);\n"],"sourceRoot":""}