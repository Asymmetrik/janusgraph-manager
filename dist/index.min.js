(()=>{"use strict";var e={389:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EdgeBuilder=void 0,t.EdgeBuilder=class{constructor(e){this._label=e,this._multiplicity="MULTI",this._properties=[]}multiplicity(e){return this._multiplicity=e,this}property(e){return this._properties.some((t=>t.key===e.key))||this._properties.push(e),this}build(){let e=`if (!mgmt.containsEdgeLabel('${this._label}')) `;return e+=`mgmt.makeEdgeLabel('${this._label}')`,e+=null!=this._multiplicity?`.multiplicity(${this._multiplicity})`:"",e+=".make();",this._properties.length>0&&(e+="mgmt.addProperties(",e+=`mgmt.getEdgeLabel('${this._label}'), `,e+=[...this._properties].map((e=>`mgmt.getPropertyKey('${e.key}')`)).join(", "),e+=")"),e}}},480:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EnableIndexBuilder=void 0,t.EnableIndexBuilder=class{constructor(e,t="graph"){this._name=e,this._graph=t}type(e){return this._type=e,this}label(e){return"VertexCentric"!==this._type&&console.warn(`Label ${e} set on EnableIndex builder. This only applies for VertexCentric indices.`),this._label=e,this}build(){let e="mgmt.updateIndex(";if("VertexCentric"===this._type){if(null==this._label||""===this._label)throw Error(`Vertex Centric index '${this._name}' attempted to be enabled without a label definition.`);e+=`mgmt.getRelationIndex(${this._graph}, '${this._name}', '${this._label}')`}else e+=`mgmt.getGraphIndex('${this._name}')`;return e+=", SchemaAction.ENABLE_INDEX);",e}}},32:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GraphIndexBuilder=void 0,t.GraphIndexBuilder=class{constructor(e){this._name=e,this._keys=[]}type(e){return this._type=e,this}key(e){return this._keys.some((t=>t.field===e.field))||this._keys.push(e),this}unique(e=!1){return this._unique=e,this}label(e){return this._label=e,this}build(){if(0===this._keys.length)throw Error(`Unable to generate index ${this._name} with no key definitions.`);let e=`if (!mgmt.containsGraphIndex('${this._name}')) `;return e+=`mgmt.buildIndex('${this._name}', Vertex.class)`,e+=[...this._keys].map((e=>`.addKey(mgmt.getPropertyKey('${e.field}')${"Mixed"===this._type?`Mapping.${e.mapping}.asParameter()`:""})`)).join(""),e+=this._unique?".unique()":"",e+=null!=this._label?`.indexOnly(mgmt.getVertexLabel('${this._label}'))`:"",e.concat("Mixed"===this._type?'.buildMixedIndex("search");':".buildCompositeIndex();")}}},638:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PropertyBuilder=void 0,t.PropertyBuilder=class{constructor(e){this._key=e,this._cardinality="SINGLE"}cardinality(e){return this._cardinality=e,this}datatype(e){return this._datatype=e,this}build(){let e=`if (!mgmt.containsPropertyKey('${this._key}')) `;return e+=`mgmt.makePropertyKey('${this._key}')`,e+=null!=this._datatype?`.dataType(${this._datatype}.class)`:"",e+=null!=this._cardinality?`.cardinality(Cardinality.${this._cardinality})`:"",e.concat(".make();")}}},513:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VertexBuilder=void 0,t.VertexBuilder=class{constructor(e){this._label=e,this._properties=[]}property(e){return this._properties.some((t=>t.key===e.key))||this._properties.push(e),this}build(){let e=`if (!mgmt.containsVertexLabel('${this._label}')) `;return e+=`mgmt.makeVertexLabel('${this._label}')`,e+=".make();",this._properties.length>0&&(e+="mgmt.addProperties(",e+=`mgmt.getVertexLabel('${this._label}'), `,e+=[...this._properties].map((e=>`mgmt.getPropertyKey('${e.key}')`)).join(", "),e+=")"),e}}},779:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VertexCentricIndexBuilder=void 0,t.VertexCentricIndexBuilder=class{constructor(e){this._name=e,this._keys=new Set,this._order="asc"}edgelabel(e){return this._edgelabel=e,this}direction(e){return this._direction=e,this}order(e){return this._order=e,this}key(e){return this._keys.add(e),this}build(){if(0===this._keys.size)throw Error(`Unable to generate vc index ${this._name} with no key definitions.`);if(null==this._direction)throw Error(`Unable to generate vc index ${this._name} with no directionality.`);if(null==this._edgelabel||""===this._edgelabel)throw Error(`Unable to generate vc index ${this._name} with no edge label.`);let e=`if (!mgmt.containsGraphIndex('${this._name}')) `;return e+="mgmt.buildEdgeIndex(",e+=`mgmt.getEdgeLabel('${this._edgelabel}'), `,e+=`'${this._name}', `,e+=`Direction.${this._direction}, `,e+=`Order.${this._order}, `,e+=[...this._keys].map((e=>`mgmt.getPropertyKey('${e}')`)).join(", "),e.concat(");")}}},463:function(e,t,i){var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||r(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),a(i(389),t),a(i(480),t),a(i(32),t),a(i(638),t),a(i(513),t),a(i(779),t)}},t={};function i(r){var a=t[r];if(void 0!==a)return a.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,i),s.exports}var r={};(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.JanusGraphManager=void 0;const t=i(463);e.JanusGraphManager=class{constructor(e,t){this.client=e,this.options=t,this.state="NEW",this.OPEN_MGMT=`mgmt = ${this.options.graphName}.openManagement();0;`,null==t.graphName&&(this.options.graphName="graph"),null==t.useConfiguredGraphFactory&&(this.options.useConfiguredGraphFactory=!1)}async init(){try{return"READY"!==this.state&&(this.options.useConfiguredGraphFactory?await this.client.submit(`${this.options.graphName} = ConfiguredGraphFactory.open('${this.options.graphName}');0;`):null!=this.options.configPath&&await this.client.submit(`${this.options.graphName} = JanusGraphFactory.open('${this.options.configPath}');0;`),await this.client.submit(this.OPEN_MGMT),this.state="READY"),Promise.resolve(this.state)}catch(e){return this.state="ERROR",Promise.reject(e)}}async createGraphIndex(e,i=!1){await this.init();const r=new t.GraphIndexBuilder(e.name);r.label(e.label).type(e.type).unique(e.unique),e.keys.forEach((e=>r.key(e)));try{return await this.client.submit(r.build()),i&&await this.commit(),Promise.resolve(1)}catch(e){return Promise.reject(e)}}async createVertexCentricIndex(e,i=!1){await this.init();const r=new t.VertexCentricIndexBuilder(e.name);r.direction(e.direction).edgelabel(e.edgelabel).order(e.order),e.keys.forEach((e=>r.key(e)));try{return await this.client.submit(r.build()),i&&await this.commit(),Promise.resolve(1)}catch(e){return Promise.reject(e)}}async createIndices(e,t=!1){try{await this.init();let i=0;return i+=(await Promise.all(e.graphIndices.map((e=>this.createGraphIndex(e,t))))).length,i+=(await Promise.all(e.vcIndices.map((e=>this.createVertexCentricIndex(e,t))))).length,t&&await this.commit(),Promise.resolve(i)}catch(e){return Promise.reject(e)}}async enableIndices(e,i=!1){try{await this.init();const r=e.graphIndices.map((i=>new t.EnableIndexBuilder(i.name,e.name).build())),a=e.vcIndices.map((i=>new t.EnableIndexBuilder(i.name,e.name).type("VertexCentric").label(i.edgelabel).build())),s=[...r,...a].map((e=>this.client.submit(e))).length;return i&&await this.commit(),Promise.resolve(s)}catch(e){return Promise.reject(e)}}async createSchema(e,i=!1){try{await this.init();let r=0;return r+=(await Promise.all([...e.vertices,...e.edges].flatMap((e=>e.properties)).map((e=>new t.PropertyBuilder(e.key).datatype(e.datatype).cardinality(e.cardinality).build())).map((e=>this.client.submit(e))))).length,r+=(await Promise.all(e.vertices.map((e=>{const i=new t.VertexBuilder(e.label);return e.properties.forEach((e=>i.property(e))),i.build()})).map((e=>this.client.submit(e))))).length,r+=(await Promise.all(e.edges.map((e=>{const i=new t.EdgeBuilder(e.label);return e.properties.forEach((e=>i.property(e))),i.build()})).map((e=>this.client.submit(e))))).length,i&&(await this.commit(),r+=await this.createIndices(e)),Promise.resolve(r)}catch(e){return Promise.reject(e)}}async commit(e){try{await this.init();const t=await this.client.submit(`${e??""};mgmt.commit();`);return this.state="COMMIT",t}catch(e){return this.state="ERROR",Promise.reject(e)}}async close(){try{if(["CLOSED","ERROR"].some((e=>e===this.state)))return;const e=await this.client.close();return this.state="CLOSED",e}catch(e){return this.state="ERROR",Promise.reject(e)}}}})(),exports.janusgraphmanager=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,