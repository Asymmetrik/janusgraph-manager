(()=>{"use strict";var e={389:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EdgeBuilder=void 0,t.EdgeBuilder=class{constructor(e){this._label=e,this._multiplicity="MULTI",this._properties=[]}multiplicity(e){return this._multiplicity=e,this}property(e){return this._properties.some((t=>t.key===e.key))||this._properties.push(e),this}build(){let e=`if (!mgmt.containsEdgeLabel('${this._label}')) `;return e+=`mgmt.makeEdgeLabel('${this._label}')`,e+=null!=this._multiplicity?`.multiplicity(${this._multiplicity})`:"",e+=".make();",this._properties.length>0&&(e+="mgmt.addProperties(",e+=`mgmt.getEdgeLabel('${this._label}'), `,e+=[...this._properties].map((e=>`mgmt.getPropertyKey('${e.key}')`)).join(", "),e+=")"),e}}},480:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EnableIndexBuilder=void 0,t.EnableIndexBuilder=class{constructor(e,t="graph"){this._name=e,this._graph=t}type(e){return this._type=e,this}label(e){return"VertexCentric"!==this._type&&console.warn(`Label ${e} set on EnableIndex builder. This only applies for VertexCentric indices.`),this._label=e,this}build(){let e="mgmt.updateIndex(";if("VertexCentric"===this._type){if(null==this._label||""===this._label)throw Error(`Vertex Centric index '${this._name}' attempted to be enabled without a label definition.`);e+=`mgmt.getRelationIndex(${this._graph}, '${this._name}', '${this._label}')`}else e+=`mgmt.getGraphIndex('${this._name}')`;return e+=", SchemaAction.ENABLE_INDEX);",e}}},32:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GraphIndexBuilder=void 0,t.GraphIndexBuilder=class{constructor(e){this._name=e,this._keys=[]}type(e){return this._type=e,this}key(e){return this._keys.some((t=>t.field===e.field))||this._keys.push(e),this}unique(e=!1){return this._unique=e,this}label(e){return this._label=e,this}build(){if(0===this._keys.length)throw Error(`Unable to generate index ${this._name} with no key definitions.`);let e=`if (!mgmt.containsGraphIndex('${this._name}')) `;return e+=`mgmt.buildIndex('${this._name}', Vertex.class)`,e+=[...this._keys].map((e=>`.addKey(mgmt.getPropertyKey('${e.field}')${"Mixed"===this._type?`Mapping.${e.mapping}.asParameter()`:""})`)).join(""),e+=this._unique?".unique()":"",e+=null!=this._label?`.indexOnly(mgmt.getVertexLabel('${this._label}'))`:"",e.concat("Mixed"===this._type?'.buildMixedIndex("search");':".buildCompositeIndex();")}}},638:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PropertyBuilder=void 0,t.PropertyBuilder=class{constructor(e){this._key=e,this._cardinality="SINGLE"}cardinality(e){return this._cardinality=e,this}datatype(e){return this._datatype=e,this}build(){let e=`if (!mgmt.containsPropertyKey('${this._key}')) `;return e+=`mgmt.makePropertyKey('${this._key}')`,e+=null!=this._datatype?`.dataType(${this._datatype}.class)`:"",e+=null!=this._cardinality?`.cardinality(Cardinality.${this._cardinality})`:"",e.concat(".make();")}}},513:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VertexBuilder=void 0,t.VertexBuilder=class{constructor(e){this._label=e,this._properties=[]}property(e){return this._properties.some((t=>t.key===e.key))||this._properties.push(e),this}build(){let e=`if (!mgmt.containsVertexLabel('${this._label}')) `;return e+=`mgmt.makeVertexLabel('${this._label}')`,e+=".make();",this._properties.length>0&&(e+="mgmt.addProperties(",e+=`mgmt.getVertexLabel('${this._label}'), `,e+=[...this._properties].map((e=>`mgmt.getPropertyKey('${e.key}')`)).join(", "),e+=")"),e}}},779:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VertexCentricIndexBuilder=void 0,t.VertexCentricIndexBuilder=class{constructor(e){this._name=e,this._keys=new Set,this._order="asc"}edgelabel(e){return this._edgelabel=e,this}direction(e){return this._direction=e,this}order(e){return this._order=e,this}key(e){return this._keys.add(e),this}build(){if(0===this._keys.size)throw Error(`Unable to generate vc index ${this._name} with no key definitions.`);if(null==this._direction)throw Error(`Unable to generate vc index ${this._name} with no directionality.`);if(null==this._edgelabel||""===this._edgelabel)throw Error(`Unable to generate vc index ${this._name} with no edge label.`);let e=`if (!mgmt.containsGraphIndex('${this._name}')) `;return e+="mgmt.buildEdgeIndex(",e+=`mgmt.getEdgeLabel('${this._edgelabel}'), `,e+=`'${this._name}', `,e+=`Direction.${this._direction}, `,e+=`Order.${this._order}, `,e+=[...this._keys].map((e=>`mgmt.getPropertyKey('${e}')`)).join(", "),e.concat(");")}}},463:function(e,t,i){var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),s=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||r(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),s(i(389),t),s(i(480),t),s(i(32),t),s(i(638),t),s(i(513),t),s(i(779),t)}},t={};function i(r){var s=t[r];if(void 0!==s)return s.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,i),a.exports}var r={};(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.JanusGraphManager=void 0;const t=i(463);e.JanusGraphManager=class{constructor(e,t){this.client=e,this.options=t,this.state="NEW",this.OPEN_MGMT=`mgmt = ${this.options.graphName}.openManagement();0;`,null==t.graphName&&(this.options.graphName="graph"),null==t.useConfiguredGraphFactory&&(this.options.useConfiguredGraphFactory=!1)}async init(){try{return"READY"!==this.state&&(this.options.useConfiguredGraphFactory?await this.client.submit(`${this.options.graphName} = ConfiguredGraphFactory.open('${this.options.graphName}');0;`):null!=this.options.configPath&&await this.client.submit(`${this.options.graphName} = JanusGraphFactory.open('${this.options.configPath}');0;`),await this.client.submit(this.OPEN_MGMT),this.state="READY"),Promise.resolve(this.state)}catch(e){return this.state="ERROR",Promise.reject(e)}}async createGraphIndex(e,i=!1){const r=new t.GraphIndexBuilder(e.name);r.label(e.label).type(e.type).unique(e.unique),e.keys.forEach((e=>r.key(e)));try{return await this.client.submit(r.build()),i&&await this.commit(),Promise.resolve(1)}catch(e){return Promise.reject(e)}}async createVertexCentricIndex(e,i=!1){const r=new t.VertexCentricIndexBuilder(e.name);r.direction(e.direction).edgelabel(e.edgelabel).order(e.order),e.keys.forEach((e=>r.key(e)));try{return await this.client.submit(r.build()),i&&await this.commit(),Promise.resolve(1)}catch(e){return Promise.reject(e)}}async createIndices(e,t=!1){try{this.init();let i=0;return i+=(await Promise.all(e.graphIndices.map((e=>this.createGraphIndex(e,t))))).length,i+=(await Promise.all(e.vcIndices.map((e=>this.createVertexCentricIndex(e,t))))).length,t&&await this.commit(),Promise.resolve(i)}catch(e){return Promise.reject(e)}}async enableIndices(e,i=!1){try{this.init();const r=e.graphIndices.map((i=>new t.EnableIndexBuilder(i.name,e.name).build())),s=e.vcIndices.map((i=>new t.EnableIndexBuilder(i.name,e.name).type("VertexCentric").label(i.edgelabel).build())),a=[...r,...s].map((e=>this.client.submit(e))).length;return i&&await this.commit(),Promise.resolve(a)}catch(e){return Promise.reject(e)}}async createSchema(e,i=!1){try{this.init();let r=0;return r+=(await Promise.all([...e.vertices,...e.edges].flatMap((e=>e.properties)).map((e=>new t.PropertyBuilder(e.key).datatype(e.datatype).cardinality(e.cardinality).build())).map((e=>this.client.submit(e))))).length,r+=(await Promise.all(e.vertices.map((e=>{const i=new t.VertexBuilder(e.label);return e.properties.forEach((e=>i.property(e))),i.build()})).map((e=>this.client.submit(e))))).length,r+=(await Promise.all(e.edges.map((e=>{const i=new t.EdgeBuilder(e.label);return e.properties.forEach((e=>i.property(e))),i.build()})).map((e=>this.client.submit(e))))).length,i&&(await this.commit(),r+=await this.createIndices(e)),Promise.resolve(r)}catch(e){return Promise.reject(e)}}async commit(e){try{this.init();const t=await this.client.submit(`${e??""};mgmt.commit();`);return this.state="COMMIT",t}catch(e){return this.state="ERROR",Promise.reject(e)}}async close(){try{if(["CLOSED","ERROR"].some((e=>e===this.state)))return;const e=await this.client.close();return this.state="CLOSED",e}catch(e){return this.state="ERROR",Promise.reject(e)}}}})(),exports.janusgraphmanager=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYW51c2dyYXBobWFuYWdlci8uL3NyYy9idWlsZGVycy9FZGdlQnVpbGRlci50cyIsIndlYnBhY2s6Ly9qYW51c2dyYXBobWFuYWdlci8uL3NyYy9idWlsZGVycy9FbmFibGVJbmRleEJ1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vamFudXNncmFwaG1hbmFnZXIvLi9zcmMvYnVpbGRlcnMvR3JhcGhJbmRleEJ1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vamFudXNncmFwaG1hbmFnZXIvLi9zcmMvYnVpbGRlcnMvUHJvcGVydHlCdWlsZGVyLnRzIiwid2VicGFjazovL2phbnVzZ3JhcGhtYW5hZ2VyLy4vc3JjL2J1aWxkZXJzL1ZlcnRleEJ1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vamFudXNncmFwaG1hbmFnZXIvLi9zcmMvYnVpbGRlcnMvVmVydGV4Q2VudHJpY0luZGV4QnVpbGRlci50cyIsIndlYnBhY2s6Ly9qYW51c2dyYXBobWFuYWdlci8uL3NyYy9idWlsZGVycy9pbmRleC50cyIsIndlYnBhY2s6Ly9qYW51c2dyYXBobWFuYWdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9qYW51c2dyYXBobWFuYWdlci8uL3NyYy9KYW51c0dyYXBoTWFuYWdlci50cyJdLCJuYW1lcyI6WyJfbGFiZWwiLCJfbXVsdGlwbGljaXR5IiwiX3Byb3BlcnRpZXMiLCJtdWx0aXBsaWNpdHkiLCJ0aGlzIiwicHJvcGVydHkiLCJzb21lIiwicCIsImtleSIsInB1c2giLCJvdXRwdXQiLCJsZW5ndGgiLCJtYXAiLCJwcm9wIiwiam9pbiIsIl9uYW1lIiwiX2dyYXBoIiwidHlwZSIsIl90eXBlIiwibGFiZWwiLCJjb25zb2xlIiwid2FybiIsIkVycm9yIiwiX2tleXMiLCJrIiwiZmllbGQiLCJ1bmlxdWUiLCJfdW5pcXVlIiwibWFwcGluZyIsImNvbmNhdCIsIl9rZXkiLCJfY2FyZGluYWxpdHkiLCJjYXJkaW5hbGl0eSIsImRhdGF0eXBlIiwiX2RhdGF0eXBlIiwiU2V0IiwiX29yZGVyIiwiZWRnZWxhYmVsIiwiX2VkZ2VsYWJlbCIsImRpcmVjdGlvbiIsIl9kaXJlY3Rpb24iLCJvcmRlciIsImFkZCIsInNpemUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJjbGllbnQiLCJvcHRpb25zIiwic3RhdGUiLCJPUEVOX01HTVQiLCJncmFwaE5hbWUiLCJ1c2VDb25maWd1cmVkR3JhcGhGYWN0b3J5Iiwic3VibWl0IiwiY29uZmlnUGF0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZXJyIiwicmVqZWN0IiwiaW5kZXgiLCJjb21taXQiLCJidWlsZGVyIiwiR3JhcGhJbmRleEJ1aWxkZXIiLCJuYW1lIiwia2V5cyIsImZvckVhY2giLCJidWlsZCIsIlZlcnRleENlbnRyaWNJbmRleEJ1aWxkZXIiLCJzY2hlbWEiLCJpbml0IiwiY291bnQiLCJhbGwiLCJncmFwaEluZGljZXMiLCJpIiwiY3JlYXRlR3JhcGhJbmRleCIsInZjSW5kaWNlcyIsImNyZWF0ZVZlcnRleENlbnRyaWNJbmRleCIsImdpIiwiRW5hYmxlSW5kZXhCdWlsZGVyIiwidmNpIiwibXNnIiwiaW5kaWNlcyIsInZlcnRpY2VzIiwiZWRnZXMiLCJmbGF0TWFwIiwidiIsInByb3BlcnRpZXMiLCJQcm9wZXJ0eUJ1aWxkZXIiLCJWZXJ0ZXhCdWlsZGVyIiwiZSIsIkVkZ2VCdWlsZGVyIiwiY3JlYXRlSW5kaWNlcyIsIm1lc3NhZ2UiLCJzIiwiY2xvc2UiXSwibWFwcGluZ3MiOiI0R0FJQSxvQkFJSSxZQUFvQkEsR0FBQSxLQUFBQSxTQUhaLEtBQUFDLGNBQWtDLFFBQ2xDLEtBQUFDLFlBQTBCLEdBSWxDLGFBQWFDLEdBRVQsT0FEQUMsS0FBS0gsY0FBZ0JFLEVBQ2RDLEtBR1gsU0FBU0MsR0FDTCxPQUFJRCxL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RCxPQUFPTSxPQUFPMkIsT0FFM0MzRSxPQUVGaUUsVUFDVWYsUUFBUWdCLElBQ1ZILEVBQU9lLE1BQ0Y3RSxLQUFLbUYsSUFDRixNQUFNNUIsRUFBVSxJQUFJLEVBQUE2QixZQUFZRCxFQUFFNUUsT0FFbEMsT0FEQTRFLEVBQUVILFdBQVdyQixTQUFTaEUsR0FBTTRELEVBQVE5RCxTQUFTRSxLQUN0QzRELEVBQVFLLFdBRWxCNUQsS0FBSzBFLEdBQVFsRixLQUFLaUQsT0FBT00sT0FBTzJCLE9BRTNDM0UsT0FDRTRFLFVBQ01uRixLQUFLOEQsU0FDWFUsU0FBZXhFLEtBQUs2RixjQUFjdkIsSUFFL0JiLFFBQVFDLFFBQVFjLEdBQ3pCLE1BQU9iLEdBQ0wsT0FBT0YsUUFBUUcsT0FBT0QsSUFTOUIsYUFBYW1DLEdBQ1QsSUFDSTlGLEtBQUt1RSxPQUNMLE1BQU1ULFFBQWU5RCxLQUFLaUQsT0FBT00sT0FDN0IsR0FBR3VDLEdBQVcscUJBR2xCLE9BREE5RixLQUFLbUQsTUFBUSxTQUNOVyxFQUNULE1BQU9ILEdBRUwsT0FEQTNELEtBQUttRCxNQUFRLFFBQ05NLFFBQVFHLE9BQU9ELElBUTlCLGNBQ0ksSUFDSSxHQUFJLENBQUMsU0FBVSxTQUFTekQsTUFBTTZGLEdBQU1BLElBQU0vRixLQUFLbUQsUUFBUSxPQUN2RCxNQUFNNkMsUUFBY2hHLEtBQUtpRCxPQUFPK0MsUUFFaEMsT0FEQWhHLEtBQUttRCxNQUFRLFNBQ042QyxFQUNULE1BQU9yQyxHQUVMLE9BREEzRCxLQUFLbUQsTUFBUSxRQUNOTSxRQUFRRyxPQUFPRCxPIiwiZmlsZSI6ImluZGV4Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1aWxkZXIgfSBmcm9tIFwiLi9CdWlsZGVyLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgRWRnZU11bHRpcGxpY2l0eSB9IGZyb20gXCIuLi90eXBlcy9FZGdlXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eSB9IGZyb20gXCIuLi90eXBlcy9Qcm9wZXJ0eVwiO1xuXG5leHBvcnQgY2xhc3MgRWRnZUJ1aWxkZXIgaW1wbGVtZW50cyBCdWlsZGVyPHN0cmluZz4ge1xuICAgIHByaXZhdGUgX211bHRpcGxpY2l0eTogRWRnZU11bHRpcGxpY2l0eSA9IFwiTVVMVElcIjtcbiAgICBwcml2YXRlIF9wcm9wZXJ0aWVzOiBQcm9wZXJ0eVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9sYWJlbDogc3RyaW5nKSB7fVxuXG4gICAgbXVsdGlwbGljaXR5KG11bHRpcGxpY2l0eTogRWRnZU11bHRpcGxpY2l0eSk6IHRoaXMge1xuICAgICAgICB0aGlzLl9tdWx0aXBsaWNpdHkgPSBtdWx0aXBsaWNpdHk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHByb3BlcnR5KHByb3BlcnR5OiBQcm9wZXJ0eSk6IHRoaXMge1xuICAgICAgICBpZiAodGhpcy5fcHJvcGVydGllcy5zb21lKChwKSA9PiBwLmtleSA9PT0gcHJvcGVydHkua2V5KSkgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJ1aWxkKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBvdXRwdXQgPSBgaWYgKCFtZ210LmNvbnRhaW5zRWRnZUxhYmVsKCcke3RoaXMuX2xhYmVsfScpKSBgO1xuICAgICAgICBvdXRwdXQgKz0gYG1nbXQubWFrZUVkZ2VMYWJlbCgnJHt0aGlzLl9sYWJlbH0nKWA7XG4gICAgICAgIG91dHB1dCArPVxuICAgICAgICAgICAgdGhpcy5fbXVsdGlwbGljaXR5ICE9IG51bGxcbiAgICAgICAgICAgICAgICA/IGAubXVsdGlwbGljaXR5KCR7dGhpcy5fbXVsdGlwbGljaXR5fSlgXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICBvdXRwdXQgKz0gXCIubWFrZSgpO1wiO1xuICAgICAgICBpZiAodGhpcy5fcHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gXCJtZ210LmFkZFByb3BlcnRpZXMoXCI7XG4gICAgICAgICAgICBvdXRwdXQgKz0gYG1nbXQuZ2V0RWRnZUxhYmVsKCcke3RoaXMuX2xhYmVsfScpLCBgO1xuICAgICAgICAgICAgb3V0cHV0ICs9IFsuLi50aGlzLl9wcm9wZXJ0aWVzXVxuICAgICAgICAgICAgICAgIC5tYXAoKHByb3ApID0+IGBtZ210LmdldFByb3BlcnR5S2V5KCcke3Byb3Aua2V5fScpYClcbiAgICAgICAgICAgICAgICAuam9pbihcIiwgXCIpO1xuICAgICAgICAgICAgb3V0cHV0ICs9IFwiKVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSW5kZXhUeXBlIH0gZnJvbSAnLi4vdHlwZXMvR3JhcGhJbmRleCc7XG5pbXBvcnQgeyBCdWlsZGVyIH0gZnJvbSAnLi9CdWlsZGVyLmludGVyZmFjZSc7XG5cbi8qKlxuICogQnVpbGRzIGEgbWFuYWdlbWVudCBzdHJpbmcgdGhhdCBhdHRlbXB0cyB0byBlbmFibGUgYSBzcGVjaWZpYyBpbmRleC5cbiAqL1xuZXhwb3J0IGNsYXNzIEVuYWJsZUluZGV4QnVpbGRlciBpbXBsZW1lbnRzIEJ1aWxkZXI8c3RyaW5nPiB7XG4gICAgcHJpdmF0ZSBfdHlwZSE6IEluZGV4VHlwZTtcbiAgICBwcml2YXRlIF9sYWJlbCE6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIF9uYW1lIEluZGV4IHRvIGF0dGVtcHQgdG8gZW5hYmxlLlxuICAgICAqIEBwYXJhbSBfZ3JhcGggR3JhcGggbmFtZSB0aGF0IHRoZSBpbmRleCByZXNpZGVzIG9uLiBEZWZhdWx0IGBncmFwaGAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfbmFtZTogc3RyaW5nLCBwcml2YXRlIF9ncmFwaDogc3RyaW5nID0gJ2dyYXBoJykge31cblxuICAgIHR5cGUodHlwZTogSW5kZXhUeXBlKTogdGhpcyB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2ZXJ0ZXggbGFiZWwgZm9yIFZlcnRleENlbnRyaWMgaW5kaWNpZXMuXG4gICAgICogQHBhcmFtIGxhYmVsIExhYmVsXG4gICAgICogQHJldHVybnMgVGhlIGJ1aWxkZXIuXG4gICAgICovXG4gICAgbGFiZWwobGFiZWw6IHN0cmluZyk6IHRoaXMge1xuICAgICAgICBpZiAodGhpcy5fdHlwZSAhPT0gJ1ZlcnRleENlbnRyaWMnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgYExhYmVsICR7bGFiZWx9IHNldCBvbiBFbmFibGVJbmRleCBidWlsZGVyLiBUaGlzIG9ubHkgYXBwbGllcyBmb3IgVmVydGV4Q2VudHJpYyBpbmRpY2VzLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFiZWwgPSBsYWJlbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIHRoZSBvdXRwdXQgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIFN0cmluZyB0aGF0IGNhbGxzIEVOQUJMRV9JTkRFWCBpbiBKRy5cbiAgICAgKiBAdGhyb3dzIEFuIEVycm9yIGlmIGFuIGF0dGVtcHQgaXMgbWFkZSB0byBlbmFibGUgYSBWZXJ0ZXhDZW50cmljIGluZGV4IHdpdGhvdXQgYSBsYWJlbC5cbiAgICAgKi9cbiAgICBidWlsZCgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgb3V0cHV0ID0gJ21nbXQudXBkYXRlSW5kZXgoJztcbiAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09ICdWZXJ0ZXhDZW50cmljJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xhYmVsID09IG51bGwgfHwgdGhpcy5fbGFiZWwgPT09ICcnKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgVmVydGV4IENlbnRyaWMgaW5kZXggJyR7dGhpcy5fbmFtZX0nIGF0dGVtcHRlZCB0byBiZSBlbmFibGVkIHdpdGhvdXQgYSBsYWJlbCBkZWZpbml0aW9uLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgb3V0cHV0ICs9IGBtZ210LmdldFJlbGF0aW9uSW5kZXgoJHt0aGlzLl9ncmFwaH0sICcke3RoaXMuX25hbWV9JywgJyR7dGhpcy5fbGFiZWx9JylgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGBtZ210LmdldEdyYXBoSW5kZXgoJyR7dGhpcy5fbmFtZX0nKWA7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ICs9IGAsIFNjaGVtYUFjdGlvbi5FTkFCTEVfSU5ERVgpO2A7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnVpbGRlciB9IGZyb20gJy4vQnVpbGRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29tcG9zaXRlT3JNaXhlZEluZGV4VHlwZSwgSW5kZXhLZXkgfSBmcm9tICcuLi90eXBlcy9HcmFwaEluZGV4JztcblxuLyoqXG4gKiBJbmRleCBCdWlsZGVyIGZvciBDb21wb3NpdGUgb3IgTWl4ZWQgaW5kaWNlcy5cbiAqXG4gKiBGb3IgVmVydGV4Q2VudHJpYyBpbmRpY2llcywgcGxlYXNlIHVzZSB7QGxpbmsgVmVydGV4Q2VudHJpY0luZGV4QnVpbGRlcn1cbiAqL1xuZXhwb3J0IGNsYXNzIEdyYXBoSW5kZXhCdWlsZGVyIGltcGxlbWVudHMgQnVpbGRlcjxzdHJpbmc+IHtcbiAgICBwcml2YXRlIF90eXBlPzogQ29tcG9zaXRlT3JNaXhlZEluZGV4VHlwZTtcbiAgICBwcml2YXRlIF9rZXlzOiBJbmRleEtleVtdID0gW107XG4gICAgcHJpdmF0ZSBfdW5pcXVlPzogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9sYWJlbD86IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX25hbWU6IHN0cmluZykge31cblxuICAgIHR5cGUodHlwZTogQ29tcG9zaXRlT3JNaXhlZEluZGV4VHlwZSk6IHRoaXMge1xuICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAga2V5KGtleTogSW5kZXhLZXkpOiB0aGlzIHtcbiAgICAgICAgaWYgKHRoaXMuX2tleXMuc29tZSgoaykgPT4gay5maWVsZCA9PT0ga2V5LmZpZWxkKSkgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB1bmlxdWUodW5pcXVlID0gZmFsc2UpOiB0aGlzIHtcbiAgICAgICAgdGhpcy5fdW5pcXVlID0gdW5pcXVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBsYWJlbChsYWJlbD86IHN0cmluZyk6IHRoaXMge1xuICAgICAgICB0aGlzLl9sYWJlbCA9IGxhYmVsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBidWlsZCgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5fa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gZ2VuZXJhdGUgaW5kZXggJHt0aGlzLl9uYW1lfSB3aXRoIG5vIGtleSBkZWZpbml0aW9ucy5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvdXRwdXQgPSBgaWYgKCFtZ210LmNvbnRhaW5zR3JhcGhJbmRleCgnJHt0aGlzLl9uYW1lfScpKSBgO1xuICAgICAgICBvdXRwdXQgKz0gYG1nbXQuYnVpbGRJbmRleCgnJHt0aGlzLl9uYW1lfScsIFZlcnRleC5jbGFzcylgO1xuICAgICAgICBvdXRwdXQgKz0gWy4uLnRoaXMuX2tleXNdXG4gICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgIChrZXkpID0+XG4gICAgICAgICAgICAgICAgICAgIGAuYWRkS2V5KG1nbXQuZ2V0UHJvcGVydHlLZXkoJyR7a2V5LmZpZWxkfScpJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPT09ICdNaXhlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGBNYXBwaW5nLiR7a2V5Lm1hcHBpbmd9LmFzUGFyYW1ldGVyKClgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9KWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5qb2luKCcnKTtcbiAgICAgICAgb3V0cHV0ICs9IHRoaXMuX3VuaXF1ZSA/IGAudW5pcXVlKClgIDogJyc7XG4gICAgICAgIG91dHB1dCArPVxuICAgICAgICAgICAgdGhpcy5fbGFiZWwgIT0gbnVsbFxuICAgICAgICAgICAgICAgID8gYC5pbmRleE9ubHkobWdtdC5nZXRWZXJ0ZXhMYWJlbCgnJHt0aGlzLl9sYWJlbH0nKSlgXG4gICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgcmV0dXJuIG91dHB1dC5jb25jYXQoXG4gICAgICAgICAgICB0aGlzLl90eXBlID09PSAnTWl4ZWQnXG4gICAgICAgICAgICAgICAgPyAnLmJ1aWxkTWl4ZWRJbmRleChcInNlYXJjaFwiKTsnXG4gICAgICAgICAgICAgICAgOiAnLmJ1aWxkQ29tcG9zaXRlSW5kZXgoKTsnXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnVpbGRlciB9IGZyb20gXCIuL0J1aWxkZXIuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eUNhcmRpbmFsaXR5LCBQcm9wZXJ0eVR5cGUgfSBmcm9tIFwiLi4vdHlwZXMvUHJvcGVydHlcIjtcblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5QnVpbGRlciBpbXBsZW1lbnRzIEJ1aWxkZXI8c3RyaW5nPiB7XG4gICAgcHJpdmF0ZSBfZGF0YXR5cGUhOiBQcm9wZXJ0eVR5cGU7XG4gICAgcHJpdmF0ZSBfY2FyZGluYWxpdHk6IFByb3BlcnR5Q2FyZGluYWxpdHkgPSBcIlNJTkdMRVwiO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfa2V5OiBzdHJpbmcpIHt9XG5cbiAgICBjYXJkaW5hbGl0eShjYXJkaW5hbGl0eTogUHJvcGVydHlDYXJkaW5hbGl0eSk6IHRoaXMge1xuICAgICAgICB0aGlzLl9jYXJkaW5hbGl0eSA9IGNhcmRpbmFsaXR5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkYXRhdHlwZShkYXRhdHlwZTogUHJvcGVydHlUeXBlKTogdGhpcyB7XG4gICAgICAgIHRoaXMuX2RhdGF0eXBlID0gZGF0YXR5cGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJ1aWxkKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBvdXRwdXQgPSBgaWYgKCFtZ210LmNvbnRhaW5zUHJvcGVydHlLZXkoJyR7dGhpcy5fa2V5fScpKSBgO1xuICAgICAgICBvdXRwdXQgKz0gYG1nbXQubWFrZVByb3BlcnR5S2V5KCcke3RoaXMuX2tleX0nKWA7XG4gICAgICAgIG91dHB1dCArPVxuICAgICAgICAgICAgdGhpcy5fZGF0YXR5cGUgIT0gbnVsbCA/IGAuZGF0YVR5cGUoJHt0aGlzLl9kYXRhdHlwZX0uY2xhc3MpYCA6IFwiXCI7XG4gICAgICAgIG91dHB1dCArPVxuICAgICAgICAgICAgdGhpcy5fY2FyZGluYWxpdHkgIT0gbnVsbFxuICAgICAgICAgICAgICAgID8gYC5jYXJkaW5hbGl0eShDYXJkaW5hbGl0eS4ke3RoaXMuX2NhcmRpbmFsaXR5fSlgXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICByZXR1cm4gb3V0cHV0LmNvbmNhdChcIi5tYWtlKCk7XCIpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJ1aWxkZXIgfSBmcm9tICcuL0J1aWxkZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFByb3BlcnR5IH0gZnJvbSAnLi4vdHlwZXMvUHJvcGVydHknO1xuXG5leHBvcnQgY2xhc3MgVmVydGV4QnVpbGRlciBpbXBsZW1lbnRzIEJ1aWxkZXI8c3RyaW5nPiB7XG4gICAgcHJpdmF0ZSBfcHJvcGVydGllczogUHJvcGVydHlbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfbGFiZWw6IHN0cmluZykge31cblxuICAgIHByb3BlcnR5KHByb3BlcnR5OiBQcm9wZXJ0eSk6IHRoaXMge1xuICAgICAgICBpZiAodGhpcy5fcHJvcGVydGllcy5zb21lKChwKSA9PiBwLmtleSA9PT0gcHJvcGVydHkua2V5KSkgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJ1aWxkKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBvdXRwdXQgPSBgaWYgKCFtZ210LmNvbnRhaW5zVmVydGV4TGFiZWwoJyR7dGhpcy5fbGFiZWx9JykpIGA7XG4gICAgICAgIG91dHB1dCArPSBgbWdtdC5tYWtlVmVydGV4TGFiZWwoJyR7dGhpcy5fbGFiZWx9JylgO1xuICAgICAgICBvdXRwdXQgKz0gJy5tYWtlKCk7JztcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgb3V0cHV0ICs9ICdtZ210LmFkZFByb3BlcnRpZXMoJztcbiAgICAgICAgICAgIG91dHB1dCArPSBgbWdtdC5nZXRWZXJ0ZXhMYWJlbCgnJHt0aGlzLl9sYWJlbH0nKSwgYDtcbiAgICAgICAgICAgIG91dHB1dCArPSBbLi4udGhpcy5fcHJvcGVydGllc11cbiAgICAgICAgICAgICAgICAubWFwKChwcm9wKSA9PiBgbWdtdC5nZXRQcm9wZXJ0eUtleSgnJHtwcm9wLmtleX0nKWApXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gJyknO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnVpbGRlciB9IGZyb20gXCIuL0J1aWxkZXIuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24sIE9yZGVyIH0gZnJvbSBcIi4uL3R5cGVzL1ZlcnRleENlbnRyaWNJbmRleFwiO1xuXG4vKipcbiAqIEluZGV4IEJ1aWxkZXIgZm9yIFZlcnRleCBDZW50cmljIGluZGljZXMuXG4gKiBcbiAqIEZvciBNaXhlZC9Db21wb3NpdGUsIHBsZWFzZSB1c2Uge0BsaW5rIEluZGV4QnVpbGRlcn1cbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnRleENlbnRyaWNJbmRleEJ1aWxkZXIgaW1wbGVtZW50cyBCdWlsZGVyPHN0cmluZz4ge1xuICAgIHByaXZhdGUgX2tleXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgIHByaXZhdGUgX2RpcmVjdGlvbiE6IERpcmVjdGlvbjtcbiAgICBwcml2YXRlIF9vcmRlcjogT3JkZXIgPSBcImFzY1wiO1xuICAgIHByaXZhdGUgX2VkZ2VsYWJlbCE6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX25hbWU6IHN0cmluZykge31cblxuICAgIGVkZ2VsYWJlbChlZGdlbGFiZWw6IHN0cmluZyk6IHRoaXMge1xuICAgICAgICB0aGlzLl9lZGdlbGFiZWwgPSBlZGdlbGFiZWw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpcmVjdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbik6IHRoaXMge1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9yZGVyKG9yZGVyOiBPcmRlcik6IHRoaXMge1xuICAgICAgICB0aGlzLl9vcmRlciA9IG9yZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBrZXkoa2V5OiBzdHJpbmcpOiB0aGlzIHtcbiAgICAgICAgdGhpcy5fa2V5cy5hZGQoa2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYnVpbGQoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuX2tleXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFVuYWJsZSB0byBnZW5lcmF0ZSB2YyBpbmRleCAke3RoaXMuX25hbWV9IHdpdGggbm8ga2V5IGRlZmluaXRpb25zLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFVuYWJsZSB0byBnZW5lcmF0ZSB2YyBpbmRleCAke3RoaXMuX25hbWV9IHdpdGggbm8gZGlyZWN0aW9uYWxpdHkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2VkZ2VsYWJlbCA9PSBudWxsIHx8IHRoaXMuX2VkZ2VsYWJlbCA9PT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBVbmFibGUgdG8gZ2VuZXJhdGUgdmMgaW5kZXggJHt0aGlzLl9uYW1lfSB3aXRoIG5vIGVkZ2UgbGFiZWwuYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG91dHB1dCA9IGBpZiAoIW1nbXQuY29udGFpbnNHcmFwaEluZGV4KCcke3RoaXMuX25hbWV9JykpIGA7XG4gICAgICAgIG91dHB1dCArPSBgbWdtdC5idWlsZEVkZ2VJbmRleChgO1xuICAgICAgICBvdXRwdXQgKz0gYG1nbXQuZ2V0RWRnZUxhYmVsKCcke3RoaXMuX2VkZ2VsYWJlbH0nKSwgYDtcbiAgICAgICAgb3V0cHV0ICs9IGAnJHt0aGlzLl9uYW1lfScsIGA7XG4gICAgICAgIG91dHB1dCArPSBgRGlyZWN0aW9uLiR7dGhpcy5fZGlyZWN0aW9ufSwgYDtcbiAgICAgICAgb3V0cHV0ICs9IGBPcmRlci4ke3RoaXMuX29yZGVyfSwgYDtcbiAgICAgICAgb3V0cHV0ICs9IFsuLi50aGlzLl9rZXlzXVxuICAgICAgICAgICAgLm1hcCgoa2V5KSA9PiBgbWdtdC5nZXRQcm9wZXJ0eUtleSgnJHtrZXl9JylgKVxuICAgICAgICAgICAgLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgcmV0dXJuIG91dHB1dC5jb25jYXQoXCIpO1wiKTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9FZGdlQnVpbGRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vRW5hYmxlSW5kZXhCdWlsZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9HcmFwaEluZGV4QnVpbGRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUHJvcGVydHlCdWlsZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9WZXJ0ZXhCdWlsZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9WZXJ0ZXhDZW50cmljSW5kZXhCdWlsZGVyXCI7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsImltcG9ydCB7IGRyaXZlciB9IGZyb20gJ2dyZW1saW4nO1xuaW1wb3J0IHsgR3JhcGhTY2hlbWEgfSBmcm9tICcuL3R5cGVzL0dyYXBoU2NoZW1hJztcbmltcG9ydCB7XG4gICAgRWRnZUJ1aWxkZXIsXG4gICAgRW5hYmxlSW5kZXhCdWlsZGVyLFxuICAgIEdyYXBoSW5kZXhCdWlsZGVyLFxuICAgIFByb3BlcnR5QnVpbGRlcixcbiAgICBWZXJ0ZXhCdWlsZGVyLFxuICAgIFZlcnRleENlbnRyaWNJbmRleEJ1aWxkZXIsXG59IGZyb20gJy4vYnVpbGRlcnMnO1xuaW1wb3J0IHsgR3JhcGhJbmRleCB9IGZyb20gJy4vdHlwZXMvR3JhcGhJbmRleCc7XG5pbXBvcnQgeyBWZXJ0ZXhDZW50cmljSW5kZXggfSBmcm9tICcuL3R5cGVzL1ZlcnRleENlbnRyaWNJbmRleCc7XG5cbnR5cGUgTWFuYWdlclN0YXRlID0gJ05FVycgfCAnUkVBRFknIHwgJ0NPTU1JVCcgfCAnRVJST1InIHwgJ0NMT1NFRCc7XG5cbmV4cG9ydCB0eXBlIEphbnVzR3JhcGhNYW5nZXJPcHRpb25zID0ge1xuICAgIC8qKlxuICAgICAqIE5hbWUgb2YgdGhlIGdyYXBoIHRvIHRyYXZlcnNlLlxuICAgICAqL1xuICAgIGdyYXBoTmFtZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byB1c2UgdGhlIENvbmZpZ3VyZWRHcmFwaEZhY3RvcnkgZm9yIGR5bmFtaWMgZ3JhcGhzLlxuICAgICAqL1xuICAgIHVzZUNvbmZpZ3VyZWRHcmFwaEZhY3Rvcnk/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFBhdGggdG8gYSBKYW51c0dyYXBoRmFjdG9yeSBjb25maWd1cmF0aW9uIG9uIHRoZSByZW1vdGUsIGZvciB1c2Ugd2l0aCBKYW51c0dyYXBoRmFjdG9yeS5cbiAgICAgKi9cbiAgICBjb25maWdQYXRoPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIEphbnVzR3JhcGhNYW5hZ2VyIHtcbiAgICBwcml2YXRlIHN0YXRlOiBNYW5hZ2VyU3RhdGUgPSAnTkVXJztcblxuICAgIHByaXZhdGUgT1BFTl9NR01UID0gYG1nbXQgPSAke3RoaXMub3B0aW9ucy5ncmFwaE5hbWV9Lm9wZW5NYW5hZ2VtZW50KCk7MDtgO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjb25zdHJ1Y3Rvci5cbiAgICAgKiBAcGFyYW0gY2xpZW50IEEgcHJlY29uZmlndXJlZCBncmVtbGluIGNsaWVudCBmb3IgYWNjZXNzaW5nIGdyZW1saW4tc2VydmVyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEphbnVzR3JhcGhPcHRpb25zIGZvciBhY2Nlc3NpbmcgdGhlIGdyYXBoOlxuICAgICAqIC0gZ3JhcGhOYW1lIHdpbGwgaGF2ZSBhIGRlZmF1bHQgb2YgYCdncmFwaCdgLlxuICAgICAqIC0gdXNlQ29uZmlndXJlZEdyYXBoRmFjdG9yeSB3aWxsIGhhdmUgYSBkZWZhdWx0IG9mIGBmYWxzZWBcbiAgICAgKiAtIGNvbmZpZ1BhdGggaGFzIG5vIGRlZmF1bHQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgY2xpZW50OiBkcml2ZXIuQ2xpZW50LFxuICAgICAgICBwcml2YXRlIG9wdGlvbnM6IEphbnVzR3JhcGhNYW5nZXJPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmdyYXBoTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZ3JhcGhOYW1lID0gJ2dyYXBoJztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy51c2VDb25maWd1cmVkR3JhcGhGYWN0b3J5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy51c2VDb25maWd1cmVkR3JhcGhGYWN0b3J5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgbWFuYWdlbWVudCBzeXN0ZW0gZm9yIHRoZSBjbGllbnQgc2Vzc2lvbi5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2l0aCB0aGUgc3RhdGUgb2YgdGhlIG1hbmFnZXIuXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0KCk6IFByb21pc2U8TWFuYWdlclN0YXRlPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gJ1JFQURZJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlQ29uZmlndXJlZEdyYXBoRmFjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgXCI7MDtcIiBpcyBhIHdlaXJkIHdvcmsgYXJvdW5kIHRvIHByZXZlbnQgYW4gZXJyb3IgYmVpbmcgdGhyb3duLlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5zdWJtaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLm9wdGlvbnMuZ3JhcGhOYW1lfSA9IENvbmZpZ3VyZWRHcmFwaEZhY3Rvcnkub3BlbignJHt0aGlzLm9wdGlvbnMuZ3JhcGhOYW1lfScpOzA7YFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNvbmZpZ1BhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5zdWJtaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLm9wdGlvbnMuZ3JhcGhOYW1lfSA9IEphbnVzR3JhcGhGYWN0b3J5Lm9wZW4oJyR7dGhpcy5vcHRpb25zLmNvbmZpZ1BhdGh9Jyk7MDtgXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnN1Ym1pdCh0aGlzLk9QRU5fTUdNVCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuc3RhdGUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnRVJST1InO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVHcmFwaEluZGV4KGluZGV4OiBHcmFwaEluZGV4LCBjb21taXQgPSBmYWxzZSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgR3JhcGhJbmRleEJ1aWxkZXIoaW5kZXgubmFtZSk7XG4gICAgICAgIGJ1aWxkZXIubGFiZWwoaW5kZXgubGFiZWwpLnR5cGUoaW5kZXgudHlwZSkudW5pcXVlKGluZGV4LnVuaXF1ZSk7XG4gICAgICAgIGluZGV4LmtleXMuZm9yRWFjaCgoaykgPT4gYnVpbGRlci5rZXkoaykpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQuc3VibWl0KGJ1aWxkZXIuYnVpbGQoKSk7XG4gICAgICAgICAgICBpZiAoY29tbWl0KSBhd2FpdCB0aGlzLmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZVZlcnRleENlbnRyaWNJbmRleChpbmRleDogVmVydGV4Q2VudHJpY0luZGV4LCBjb21taXQgPSBmYWxzZSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IFZlcnRleENlbnRyaWNJbmRleEJ1aWxkZXIoXG4gICAgICAgICAgICAgICAgaW5kZXgubmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJ1aWxkZXJcbiAgICAgICAgICAgICAgICAuZGlyZWN0aW9uKGluZGV4LmRpcmVjdGlvbilcbiAgICAgICAgICAgICAgICAuZWRnZWxhYmVsKGluZGV4LmVkZ2VsYWJlbClcbiAgICAgICAgICAgICAgICAub3JkZXIoaW5kZXgub3JkZXIpO1xuICAgICAgICAgICAgaW5kZXgua2V5cy5mb3JFYWNoKChrKSA9PiBidWlsZGVyLmtleShrKSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnN1Ym1pdChidWlsZGVyLmJ1aWxkKCkpO1xuICAgICAgICAgICAgICAgIGlmIChjb21taXQpIGF3YWl0IHRoaXMuY29tbWl0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdpbGwgYnVpbGQgb25seSB0aGUgaW5kaWNlcyBmcm9tIGEgZ3JhcGggc2NoZW1hLlxuICAgICAqIEBwYXJhbSBzY2hlbWEgLSBHcmFwaFNjaGVtYSB0byBnZXQgaW5kZXggZGVmaW5pdGlvbnMgZnJvbS5cbiAgICAgKiBAcGFyYW0gY29tbWl0IC0gV2hldGhlciBvciBub3QgdG8gY29tbWl0IGFuZCBjbG9zZSB0aGUgdHJhdmVyc2FsLiBEZWZhdWx0OiBgZmFsc2VgXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIG51bWJlciBvZiBzdWNjZXNzZnVsIHRyYXZlcnNhbHMgbWFkZS5cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVJbmRpY2VzKHNjaGVtYTogR3JhcGhTY2hlbWEsIGNvbW1pdCA9IGZhbHNlKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGdyYXBoIGluZGljZXMuXG4gICAgICAgICAgICBjb3VudCArPSAoXG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYS5ncmFwaEluZGljZXMubWFwKChpKSA9PiB0aGlzLmNyZWF0ZUdyYXBoSW5kZXgoaSwgY29tbWl0KSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHZjIGluZGljZXMuXG4gICAgICAgICAgICBjb3VudCArPSAoXG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYS52Y0luZGljZXMubWFwKChpKSA9PiB0aGlzLmNyZWF0ZVZlcnRleENlbnRyaWNJbmRleChpLCBjb21taXQpKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGNvbW1pdCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY29tbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvdW50KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGVuYWJsZSBpbmRpY2VzLlxuICAgICAqIEBwYXJhbSBzY2hlbWEgLSBHcmFwaFNjaGVtYSB0byBlbmFibGUgaW5kaWNpZXMgZm9yLlxuICAgICAqIEBwYXJhbSBjb21taXQgLSBXaGV0aGVyIG9yIG5vdCB0byBjb21taXQgYW5kIGNsb3NlIHRoZSB0cmF2ZXJzYWwuIERlZmF1bHQ6IGBmYWxzZWBcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgY29udGFpbmluZyB0aGUgbnVtYmVyIG9mIHN1Y2Nlc3NmdWwgdHJhdmVyc2FscyBtYWRlLlxuICAgICAqL1xuICAgIGFzeW5jIGVuYWJsZUluZGljZXMoc2NoZW1hOiBHcmFwaFNjaGVtYSwgY29tbWl0ID0gZmFsc2UpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgICAgICBjb25zdCBnaSA9IHNjaGVtYS5ncmFwaEluZGljZXMubWFwKChpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBFbmFibGVJbmRleEJ1aWxkZXIoaS5uYW1lLCBzY2hlbWEubmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuYnVpbGQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdmNpID0gc2NoZW1hLnZjSW5kaWNlcy5tYXAoKGkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IEVuYWJsZUluZGV4QnVpbGRlcihpLm5hbWUsIHNjaGVtYS5uYW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRlci50eXBlKCdWZXJ0ZXhDZW50cmljJykubGFiZWwoaS5lZGdlbGFiZWwpLmJ1aWxkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gWy4uLmdpLCAuLi52Y2ldLm1hcCgobXNnKSA9PiB0aGlzLmNsaWVudC5zdWJtaXQobXNnKSlcbiAgICAgICAgICAgICAgICAubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGNvbW1pdCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY29tbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvdW50KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYWxsIHRoZSBzY2hlbWEgZGVmaW5pdGlvbnMuXG4gICAgICogQHBhcmFtIHNjaGVtYSAtIEdyYXBoU2NoZW1hIHRvIGdldCBzY2hlbWEgZGVmaW5pdGlvbnMgZnJvbS5cbiAgICAgKiBAcGFyYW0gaW5kaWNlcyAtIElmIHNldCBgdHJ1ZWAsIHdpbGwgYnVpbGQgaW5kaWNlcyBhcyB3ZWxsLiBEZWZhdWx0IGBmYWxzZWAuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIG51bWJlciBvZiBzdWNjZXNzZnVsIHRyYXZlcnNhbHMgbWFkZS5cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVTY2hlbWEoc2NoZW1hOiBHcmFwaFNjaGVtYSwgaW5kaWNlcyA9IGZhbHNlKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgIC8vIEV4dHJhY3QvQnVpbGQgb3VyIHByb3BlcnRpZXMgZGVmaW5pdGlvbnMuXG4gICAgICAgICAgICBjb3VudCArPSAoXG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgIFsuLi5zY2hlbWEudmVydGljZXMsIC4uLnNjaGVtYS5lZGdlc11cbiAgICAgICAgICAgICAgICAgICAgICAgIC5mbGF0TWFwKCh2KSA9PiB2LnByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBQcm9wZXJ0eUJ1aWxkZXIocC5rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBidWlsZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhdHlwZShwLmRhdGF0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FyZGluYWxpdHkocC5jYXJkaW5hbGl0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgobXNnKSA9PiB0aGlzLmNsaWVudC5zdWJtaXQobXNnKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBsYWJlbHMgYW5kIGFzc29jaWF0ZSBwcm9wZXJ0aWVzIGZvciB2ZXJ0aWNlcy5cbiAgICAgICAgICAgIGNvdW50ICs9IChcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hLnZlcnRpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBWZXJ0ZXhCdWlsZGVyKHYubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYucHJvcGVydGllcy5mb3JFYWNoKChwKSA9PiBidWlsZGVyLnByb3BlcnR5KHApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRlci5idWlsZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKG1zZykgPT4gdGhpcy5jbGllbnQuc3VibWl0KG1zZykpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKS5sZW5ndGg7XG4gICAgICAgICAgICAvLyBDcmVhdGUgbGFiZWxzIGFuZCBhc3NvY2lhdGUgcHJvcGVydGllcyBmb3IgZWRnZXMuXG4gICAgICAgICAgICBjb3VudCArPSAoXG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYS5lZGdlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgRWRnZUJ1aWxkZXIoZS5sYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcm9wZXJ0aWVzLmZvckVhY2goKHApID0+IGJ1aWxkZXIucHJvcGVydHkocCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgobXNnKSA9PiB0aGlzLmNsaWVudC5zdWJtaXQobXNnKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChpbmRpY2VzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jb21taXQoKTtcbiAgICAgICAgICAgICAgICBjb3VudCArPSBhd2FpdCB0aGlzLmNyZWF0ZUluZGljZXMoc2NoZW1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY291bnQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGV2ZXJhZ2VzIHRoZSBncmVtbGluIGNsaWVudCB0byBjb21taXQgYSBtYW5hZ2VtZW50IG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgTWVzc2FnZSB0byBzZW5kIHByaW9yIHRvIHRoZSBjb21taXQuIE5vdCByZXF1aXJlZC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgZnJvbSBjbGllbnQgY29tbWl0IHN1Ym1pc3Npb24uXG4gICAgICovXG4gICAgYXN5bmMgY29tbWl0KG1lc3NhZ2U/OiBzdHJpbmcpOiBQcm9taXNlPHVua25vd24+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICAgICAgY29uc3QgY29tbWl0ID0gYXdhaXQgdGhpcy5jbGllbnQuc3VibWl0KFxuICAgICAgICAgICAgICAgIGAke21lc3NhZ2UgPz8gJyd9O21nbXQuY29tbWl0KCk7YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnQ09NTUlUJztcbiAgICAgICAgICAgIHJldHVybiBjb21taXQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICdFUlJPUic7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGNsb3NlIHRoZSBncmVtbGluIGNsaWVudC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2l0aCBjbG9zZSBzdGF0dXMtLSBkZWZlcnMgdG8ge0BzZWUgZHJpdmVyLkNsaWVudC5wcm90b3R5cGUuY2xvc2UoKX1cbiAgICAgKi9cbiAgICBhc3luYyBjbG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChbJ0NMT1NFRCcsICdFUlJPUiddLnNvbWUoKHMpID0+IHMgPT09IHRoaXMuc3RhdGUpKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBjbG9zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ0NMT1NFRCc7XG4gICAgICAgICAgICByZXR1cm4gY2xvc2U7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICdFUlJPUic7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=